{
  "version": 3,
  "sources": ["../../@tauri-apps/api/event.js"],
  "sourcesContent": ["import { invoke, transformCallback } from './core.js';\r\n\r\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\r\n// SPDX-License-Identifier: Apache-2.0\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n * The event system allows you to emit events to the backend and listen to events from it.\r\n *\r\n * This package is also accessible with `window.__TAURI__.event` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\r\n * @module\r\n */\r\n/**\r\n * @since 1.1.0\r\n */\r\nvar TauriEvent;\r\n(function (TauriEvent) {\r\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\r\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\r\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\r\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\r\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\r\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\r\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\r\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\r\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\r\n    TauriEvent[\"WEBVIEW_CREATED\"] = \"tauri://webview-created\";\r\n    TauriEvent[\"DRAG_ENTER\"] = \"tauri://drag-enter\";\r\n    TauriEvent[\"DRAG_OVER\"] = \"tauri://drag-over\";\r\n    TauriEvent[\"DRAG_DROP\"] = \"tauri://drag-drop\";\r\n    TauriEvent[\"DRAG_LEAVE\"] = \"tauri://drag-leave\";\r\n})(TauriEvent || (TauriEvent = {}));\r\n/**\r\n * Unregister the event listener associated with the given name and id.\r\n *\r\n * @ignore\r\n * @param event The event name\r\n * @param eventId Event identifier\r\n * @returns\r\n */\r\nasync function _unlisten(event, eventId) {\r\n    window.__TAURI_EVENT_PLUGIN_INTERNALS__.unregisterListener(event, eventId);\r\n    await invoke('plugin:event|unlisten', {\r\n        event,\r\n        eventId\r\n    });\r\n}\r\n/**\r\n * Listen to an emitted event to any {@link EventTarget|target}.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { listen } from '@tauri-apps/api/event';\r\n * const unlisten = await listen<string>('error', (event) => {\r\n *   console.log(`Got error, payload: ${event.payload}`);\r\n * });\r\n *\r\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n * unlisten();\r\n * ```\r\n *\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @param handler Event handler callback.\r\n * @param options Event listening options.\r\n * @returns A promise resolving to a function to unlisten to the event.\r\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function listen(event, handler, options) {\r\n    var _a;\r\n    const target = typeof (options === null || options === void 0 ? void 0 : options.target) === 'string'\r\n        ? { kind: 'AnyLabel', label: options.target }\r\n        : ((_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : { kind: 'Any' });\r\n    return invoke('plugin:event|listen', {\r\n        event,\r\n        target,\r\n        handler: transformCallback(handler)\r\n    }).then((eventId) => {\r\n        return async () => _unlisten(event, eventId);\r\n    });\r\n}\r\n/**\r\n * Listens once to an emitted event to any {@link EventTarget|target}.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { once } from '@tauri-apps/api/event';\r\n * interface LoadedPayload {\r\n *   loggedIn: boolean,\r\n *   token: string\r\n * }\r\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\r\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\r\n * });\r\n *\r\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\r\n * unlisten();\r\n * ```\r\n *\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @param handler Event handler callback.\r\n * @param options Event listening options.\r\n * @returns A promise resolving to a function to unlisten to the event.\r\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function once(event, handler, options) {\r\n    return listen(event, (eventData) => {\r\n        void _unlisten(event, eventData.id);\r\n        handler(eventData);\r\n    }, options);\r\n}\r\n/**\r\n * Emits an event to all {@link EventTarget|targets}.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { emit } from '@tauri-apps/api/event';\r\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\r\n * ```\r\n *\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @param payload Event payload.\r\n *\r\n * @since 1.0.0\r\n */\r\nasync function emit(event, payload) {\r\n    await invoke('plugin:event|emit', {\r\n        event,\r\n        payload\r\n    });\r\n}\r\n/**\r\n * Emits an event to all {@link EventTarget|targets} matching the given target.\r\n *\r\n * @example\r\n * ```typescript\r\n * import { emitTo } from '@tauri-apps/api/event';\r\n * await emitTo('main', 'frontend-loaded', { loggedIn: true, token: 'authToken' });\r\n * ```\r\n *\r\n * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\r\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\r\n * @param payload Event payload.\r\n *\r\n * @since 2.0.0\r\n */\r\nasync function emitTo(target, event, payload) {\r\n    const eventTarget = typeof target === 'string' ? { kind: 'AnyLabel', label: target } : target;\r\n    await invoke('plugin:event|emit_to', {\r\n        target: eventTarget,\r\n        event,\r\n        payload\r\n    });\r\n}\r\n\r\nexport { TauriEvent, emit, emitTo, listen, once };\r\n"],
  "mappings": ";;;;;;;AAcA,IAAI;AAAA,CACH,SAAUA,aAAY;AACnB,EAAAA,YAAW,gBAAgB,IAAI;AAC/B,EAAAA,YAAW,cAAc,IAAI;AAC7B,EAAAA,YAAW,wBAAwB,IAAI;AACvC,EAAAA,YAAW,kBAAkB,IAAI;AACjC,EAAAA,YAAW,cAAc,IAAI;AAC7B,EAAAA,YAAW,aAAa,IAAI;AAC5B,EAAAA,YAAW,6BAA6B,IAAI;AAC5C,EAAAA,YAAW,sBAAsB,IAAI;AACrC,EAAAA,YAAW,gBAAgB,IAAI;AAC/B,EAAAA,YAAW,iBAAiB,IAAI;AAChC,EAAAA,YAAW,YAAY,IAAI;AAC3B,EAAAA,YAAW,WAAW,IAAI;AAC1B,EAAAA,YAAW,WAAW,IAAI;AAC1B,EAAAA,YAAW,YAAY,IAAI;AAC/B,GAAG,eAAe,aAAa,CAAC,EAAE;AASlC,eAAe,UAAU,OAAO,SAAS;AACrC,SAAO,iCAAiC,mBAAmB,OAAO,OAAO;AACzE,QAAM,OAAO,yBAAyB;AAAA,IAClC;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AAuBA,eAAe,OAAO,OAAO,SAAS,SAAS;AAC3C,MAAI;AACJ,QAAM,SAAS,QAAQ,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,YAAY,WACvF,EAAE,MAAM,YAAY,OAAO,QAAQ,OAAO,KACxC,KAAK,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,YAAY,QAAQ,OAAO,SAAS,KAAK,EAAE,MAAM,MAAM;AAC9H,SAAO,OAAO,uBAAuB;AAAA,IACjC;AAAA,IACA;AAAA,IACA,SAAS,kBAAkB,OAAO;AAAA,EACtC,CAAC,EAAE,KAAK,CAAC,YAAY;AACjB,WAAO,YAAY,UAAU,OAAO,OAAO;AAAA,EAC/C,CAAC;AACL;AA2BA,eAAe,KAAK,OAAO,SAAS,SAAS;AACzC,SAAO,OAAO,OAAO,CAAC,cAAc;AAChC,SAAK,UAAU,OAAO,UAAU,EAAE;AAClC,YAAQ,SAAS;AAAA,EACrB,GAAG,OAAO;AACd;AAeA,eAAe,KAAK,OAAO,SAAS;AAChC,QAAM,OAAO,qBAAqB;AAAA,IAC9B;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AAgBA,eAAe,OAAO,QAAQ,OAAO,SAAS;AAC1C,QAAM,cAAc,OAAO,WAAW,WAAW,EAAE,MAAM,YAAY,OAAO,OAAO,IAAI;AACvF,QAAM,OAAO,wBAAwB;AAAA,IACjC,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,EACJ,CAAC;AACL;",
  "names": ["TauriEvent"]
}
